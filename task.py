# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GtXroAjtianZeq91P0NjeU62NeQvUzkl
"""

from keras.datasets import mnist
from keras.utils.np_utils import to_categorical
from keras.models import Sequential
import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score
from keras.layers import Convolution2D , Dense , MaxPooling2D ,Flatten

data_set = mnist.load_data('mnist.db')

count ='1'
accuracy='0'
cou = open('/data_set/count.txt','a')
count =cou.write(count)
cou.close()

cou = open('/data_set/count.txt','r')
count =cou.read()
cou.close()
if int(count) >1 and int(accuracy)!= 0:
    file = open('/data_set/accuracy.txt' , 'r')
    accuracy = file.read()
    file.close()

train ,test = data_set
X_train , y_train = train
X_test , y_test = test
X_train =X_train.astype("float32")
X_train = np.expand_dims(X_train ,axis=0)
X_train = X_train.reshape(-1 ,28,28,1)
X_test = np.expand_dims(X_test ,axis=0)
X_test= X_test.reshape(-1 ,28,28,1)
y_train = to_categorical(y_train)

if int(accuracy) <98:
    if count=='1':
        model=set_network1()
    elif count=='21':
        model=set_network2()
    elif count=='221':
        model = set_network3()
    model.fit(X_train , y_train , epochs=10)
    accuracy = str(get_accuracy(model ,X_test))
    model.save('/data_set/mnist_weight.h5')
else:
  exit()

file = open('/data_set/accuracy.txt' , 'w')
file.write(accuracy)
file.close()
count=str(int(count)+1)
cou = open('count.txt','w')
cou.write(count)
cou.close()

def set_network1():
    mod =Sequential()
    mod.add(Flatten())
    mod.add(Dense(512 ,activation='relu'))
    mod.add(Dense(10 ,activation='softmax'))
    mod.compile(optimizer = 'adam' ,loss = 'categorical_crossentropy')
    return mod

def set_network2():
    mod = Sequential()
    mod.add(Convolution2D(filters = 64 ,kernel_size=(2,2) ,input_shape =(28,28,1),activation='relu'))
    mod.add(MaxPooling2D(pool_size=(2,2)))
    mod.add(Flatten())
    mod.add(Dense(2048 ,activation='relu'))
    mod.add(Dense(512 ,activation='relu'))
    mod.add(Dense(10 ,activation='softmax'))
    mod.compile(optimizer = 'adam' ,loss = 'categorical_crossentropy')
    return mod

def set_network3():
    mod = Sequential()
    mod.add(Convolution2D(filters = 64 ,kernel_size=(2,2) ,input_shape =(28,28,1),activation='relu'))
    mod.add(MaxPooling2D(pool_size=(2,2)))
    mod.add(Convolution2D(filters = 64 ,kernel_size=(2,2) ,activation='relu'))
    mod.add(MaxPooling2D(pool_size=(2,2)))
    mod.add(Flatten())
    mod.add(Dense(2048 ,activation='relu'))
    mod.add(Dense(512 ,activation='relu'))
    mod.add(Dense(10 ,activation='softmax'))
    mod.compile(optimizer = 'adam' ,loss = 'categorical_crossentropy')
    return mod

def get_accuracy(mod ,X_test):
    y_pred = mod.predict(X_test)
    df = pd.DataFrame(data=y_pred)
    df_round = df.round()
    final_pred = pd.get_dummies(df_round).idxmax(1)
    accuracy = accuracy_score(y_test,final_pred) 
    return accuracy

accuracy = str(get_accuracy(model ,X_test))

accuracy

model.summary()





/content/sample_data